{"version":3,"sources":["components/stones/createStones.js","components/stones/stoneMaterial.js","components/stones/Bitstones.js","components/BtnTipo.js","App.js","serviceWorker.js","index.js"],"names":["createScene","model","engine","canvas","color","type","scene","BABYLON","clearColor","light","camera","attachControl","ImportMeshAsync","then","loadedMesh","stone","meshes","setTarget","getBoundingInfo","boundingBox","centerWorld","beta","alpha","radius","environmentTexture","CreateFromPrefilteredData","material","pbr","metallic","roughness","texture","diffuseTexture","refractionTexture","emissiveTexture","lightmapTexture","coordinatesMode","EXPLICIT_MODE","CUBIC_MODE","level","alphaMode","ALPHA_SUBTRACT","backFaceCulling","disableDepthWrite","specularPower","stoneMaterial","useFramingBehavior","angularSensibilityX","angularSensibilityY","autoRotateAnimation","registerBeforeRender","position","autoRotationCamera","idleRotationSpeed","idleRotationWaitTime","idleRotationSpinupTime","zoomStopsAnimation","attach","init","Bitstones","state","props","prevProps","this","window","materials","console","log","document","getElementById","CreateStones","runRenderLoop","render","addEventListener","resize","id","className","Component","BtnTipo","changeColor","useEffect","elems","M","FloatingActionButton","direction","hoverEnabled","onClick","App","useState","setColor","modelNumber","setModelNumber","style","top","right","fontSize","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","URL","process","href","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.63efa8d3.chunk.js","sourcesContent":["import * as BABYLON from \"babylonjs\";\nimport \"babylonjs-loaders\";\nimport stoneMaterial from \"./stoneMaterial\";\n\nexport default function createScene(model, engine, canvas, color, type) {\n  // Init the babylon engine\n  let scene = new BABYLON.Scene(engine);\n\n  // change the default background to black\n  scene.clearColor = new BABYLON.Color3(0, 0, 0);\n\n  // Adding Light\n  new BABYLON.HemisphericLight(\"light1\", new BABYLON.Vector3(0, 6, 0), scene);\n\n  //Adding another light\n  let light = new BABYLON.PointLight(\n    \"Omni\",\n    new BABYLON.Vector3(20, 20, 100),\n    scene\n  );\n\n  // var ground = BABYLON.Mesh.CreateGround(\"ground1\", 10, 6, 2, scene);\n\n  //Adding Camera\n  // scene.createDefaultCameraOrLight(true, true, true);\n  // let camera = scene.activeCamera;\n\n  var camera = new BABYLON.ArcRotateCamera(\n    \"Camera\",\n    0,\n    0,\n    0,\n    new BABYLON.Vector3(0, 0, 0),\n    scene\n  );\n\n  camera.attachControl(canvas, true);\n  // The first parameter can be used to specify which mesh to import. Here we import all meshes\n  // Async import mesh function with callback\n  BABYLON.SceneLoader.ImportMeshAsync(\n    \"\",\n    \"assets/models/\",\n    model + \".glb\",\n    scene\n  ).then(loadedMesh => {\n    let stone = loadedMesh.meshes[1];\n\n    camera.setTarget(stone.getBoundingInfo().boundingBox.centerWorld); // Find center & set target\n    camera.beta = 1.55;\n    camera.alpha = 1;\n    camera.radius = 9.2;\n    // camera.position.x = 2;\n\n    scene.environmentTexture = BABYLON.CubeTexture.CreateFromPrefilteredData(\n      \"assets/textures/environment.dds\",\n      scene\n    );\n\n    // Set Material\n    stone.material = stoneMaterial(scene, color);\n    camera.useFramingBehavior = true;\n\n    camera.angularSensibilityX = -1000;\n    camera.angularSensibilityY = -1000;\n    // set position and add auto rotating animation\n\n    autoRotateAnimation(camera);\n  });\n\n  // Move the light with the camera\n  scene.registerBeforeRender(function() {\n    light.position = camera.position;\n  });\n\n  return scene;\n}\n\n// Add an auto rotation animation\nvar autoRotateAnimation = function(camera) {\n  var autoRotationCamera = new BABYLON.AutoRotationBehavior();\n  autoRotationCamera.idleRotationSpeed = 0.8;\n  autoRotationCamera.idleRotationWaitTime = 10;\n  autoRotationCamera.idleRotationSpinupTime = 100;\n  autoRotationCamera.zoomStopsAnimation = true;\n  autoRotationCamera.attach(camera);\n  autoRotationCamera.init();\n};\n","import * as BABYLON from \"babylonjs\";\n\nexport default function StoneMaterial(scene, color) {\n  var pbr = new BABYLON.PBRMaterial(\"pbr\", scene);\n\n  pbr.metallic = 0.0;\n  pbr.roughness = 0.3;\n\n  var texture = new BABYLON.Texture(\"assets/textures/\" + color + \".jpg\", scene);\n\n  pbr.diffuseTexture = texture;\n  pbr.refractionTexture = texture;\n  pbr.emissiveTexture = texture;\n  pbr.lightmapTexture = texture;\n\n  pbr.diffuseTexture.coordinatesMode = BABYLON.Texture.EXPLICIT_MODE;\n  pbr.refractionTexture.coordinatesMode = BABYLON.Texture.CUBIC_MODE;\n  pbr.emissiveTexture.coordinatesMode = BABYLON.Texture.CUBIC_MODE;\n\n  pbr.diffuseTexture.level = 1;\n  pbr.refractionTexture.level = 0.6;\n  pbr.emissiveTexture.level = 0.34;\n  pbr.lightmapTexture.level = 0.6;\n\n  pbr.alpha = 1;\n  pbr.alphaMode = BABYLON.Engine.ALPHA_SUBTRACT;\n  pbr.backFaceCulling = true;\n  pbr.disableDepthWrite = true;\n\n  pbr.specularPower = 1.08;\n\n  // pbr.subSurface.tintColor = BABYLON.Color3.Teal();\n\n  // pbr.emissiveColor = new BABYLON.Color3(\n  //   Math.random() * 1,\n  //   Math.random() * 1,\n  //   Math.random() * 1\n  // );\n\n  return pbr;\n}\n","import React, { Component } from \"react\";\nimport * as BABYLON from \"babylonjs\";\nimport CreateStones from \"./createStones\";\n\nclass Bitstones extends Component {\n  state = {\n    color: this.props.color\n  };\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.color !== this.props.color) {\n      var texture = new BABYLON.Texture(\n        \"assets/textures/\" + this.props.color + \".jpg\",\n        window.scene\n      );\n\n      window.scene.materials[1].diffuseTexture = texture;\n      window.scene.materials[1].refractionTexture = texture;\n      window.scene.materials[1].emissiveTexture = texture;\n      window.scene.materials[1].lightmapTexture = texture;\n      window.scene.materials[1].lightmapTexture.level = 0.6;\n    }\n  }\n\n  componentDidMount() {\n    console.log(this.props);\n    const canvas = document.getElementById(\n      this.props.model + \"-\" + this.props.color\n    );\n    const engine = new BABYLON.Engine(canvas, true);\n\n    window.scene = CreateStones(\n      this.props.model,\n      engine,\n      canvas,\n      this.props.color\n    );\n\n    engine.runRenderLoop(function() {\n      window.scene.render();\n    });\n\n    window.addEventListener(\"resize\", () => {\n      engine.resize();\n    });\n  }\n\n  render() {\n    return (\n      <canvas\n        id={this.props.model + \"-\" + this.props.color}\n        className=\"stone_in_card\"\n      />\n    );\n  }\n}\n\nexport default Bitstones;\n","import React, { useEffect, Fragment } from \"react\";\nimport M from \"materialize-css\";\n\nconst BtnTipo = ({ changeColor }) => {\n  useEffect(() => {\n    var elems = document.getElementById(\"btnTipo\");\n    M.FloatingActionButton.init(elems, {\n      direction: \"left\",\n      hoverEnabled: false\n    });\n  }, []);\n\n  return (\n    <Fragment>\n      <div\n        id=\"btnTipo\"\n        className=\"fixed-action-btn horizontal click-to-toggle spin-close\"\n      >\n        <button\n          id=\"main-btn-floating\"\n          className=\"btn-floating btn-large teal pulse\"\n        >\n          <i className=\"large material-icons\">signal_wifi_4_bar</i>\n        </button>\n        <ul>\n          <li>\n            <button\n              onClick={() => changeColor(\"saffire\")}\n              className=\"btn-floating blue darken-2\"\n            >\n              <i className=\"material-icons\">details</i>\n            </button>\n          </li>\n          <li>\n            {\" \"}\n            <button\n              onClick={() => changeColor(\"ruby2\")}\n              className=\"btn-floating red darken-2\"\n            >\n              <i className=\"material-icons\">details</i>\n            </button>\n          </li>\n\n          <li>\n            {\" \"}\n            <button\n              onClick={() => changeColor(\"smeraldo\")}\n              className=\"btn-floating green darken-2\"\n            >\n              <i className=\"material-icons\">details</i>\n            </button>\n          </li>\n\n          <li>\n            {\" \"}\n            <button\n              onClick={() => changeColor(\"giallo\")}\n              className=\"btn-floating yellow darken-2\"\n            >\n              <i className=\"material-icons\">details</i>\n            </button>\n          </li>\n\n          <li>\n            {\" \"}\n            <button\n              onClick={() => changeColor(\"diamond\")}\n              className=\"btn-floating black darken-2\"\n            >\n              <i className=\"material-icons\">details</i>\n            </button>\n          </li>\n        </ul>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default BtnTipo;\n","import React, { useState, Fragment } from \"react\";\nimport Stone from \"./components/stones/Bitstones\";\nimport BtnTipo from \"./components/BtnTipo\";\n\nconst App = () => {\n  const totalModel = 2;\n  const [color, setColor] = useState(\"diamond\");\n  const [modelNumber, setModelNumber] = useState(1);\n\n  const changeColor = color => {\n    //state of color: that can be changed dynamically\n    setColor(color);\n  };\n\n  const updateModel = () => {\n    if (modelNumber < totalModel) {\n      setModelNumber(modelNumber + 1);\n    } else {\n      setModelNumber(1);\n    }\n  };\n\n  return (\n    <Fragment>\n      {modelNumber === 1 && <Stone color={color} model=\"diamond\" />}\n      {modelNumber === 2 && <Stone color={color} model=\"emerald2\" />}\n      <BtnTipo changeColor={changeColor} />\n\n      <button\n        style={{ position: \"fixed\", top: 10, right: 10, fontSize: 30 }}\n        className=\"btn-floating btn-large waves-effect waves-light red\"\n        onClick={updateModel}\n      >\n        {modelNumber}\n      </button>\n    </Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport \"materialize-css\";\nimport \"materialize-css/dist/css/materialize.css\";\nimport \"material-icons\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}